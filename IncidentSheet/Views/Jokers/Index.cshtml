@using X.PagedList.Mvc.PagedListExt;
@model X.PagedList.IPagedList<IncidentSheet.Models.Joker>

@{
    ViewData["Title"] = "Index";
}
<style>
    #entry {
        font-family: Tahoma;
        border-collapse: collapse;
        width: 100%;
        font-size: xx-small;
    }

        #entry th {
            padding-top: 12px;
            padding-bottom: 12px;
            text-align: center;
            background-color: forestgreen;
            color: white
        }

        #entry td {
            border: 1px solid;
            padding: 8px;
        }

        #entry tr:nth-child(even) {
            background-color: lightgrey;
        }
</style>


<h2>Index</h2>

<p>
    <b>Seach By:</b> @using (Html.BeginForm("Index", "Jokers", FormMethod.Get))
    {
        @Html.RadioButton("searchBy", "Unit", true)<text>  Unit Reporting  |</text>
        @Html.RadioButton("searchBy", "IncidentDate")<text>  Reported Incident  |</text>
        @Html.RadioButton("searchBy", "Incident")<text>  Date of Incident  </text>
        <br />
        @Html.TextBox("search", ViewBag.FilterValue as string)<input type="submit" value="Search" />
    }
</p>


<p>
    <a asp-action="Create">Enter New Incident</a>
</p>
<table class="table" id="entry">
    <thead>
        <tr>
            <th align="center">
                @Html.ActionLink("Incident Date", "Index", new { sortBy = ViewBag.SortUnit, Filter_Value = ViewBag.FilterValue, searchBy = Context.Request.Query["searchBy"], search = Context.Request.Query["search"] })
            </th>
            <th align="center">
                @Html.DisplayNameFor(model => model.First().IncidentTime)
            </th>
            <th align="center">
                @Html.ActionLink("Unit Reporting", "Index", new { sortBy = ViewBag.SortDate, Filter_Value = ViewBag.FilterValue, searchBy = Context.Request.Query["searchBy"], search = Context.Request.Query["search"] })
            </th>
            <th align="center">
                @Html.ActionLink("Type of Incident", "Index", new { sortBy = ViewBag.SortIncident, Filter_Value = ViewBag.FilterValue, searchBy = Context.Request.Query["searchBy"], search = Context.Request.Query["search"] })
            </th>
            <th align="center">
                @Html.DisplayNameFor(model => model.First().Summary)
            </th>
            <th align="center">Action</th>
        </tr>
    </thead>
    <tbody>
        @if (Model.Count() == 0)
        {
            <tr>
                <td colspan="5" align="center">No match found in database</td>
            </tr>
        }
        else
        {
            foreach (Joker joker in Model)
            {
                <tr>
                    <td align="center">
                        @Html.ActionLink(joker.IncidentDate.ToString("MM/dd/yyyy"), "Details", new { id = joker.ID })
                    </td>
                    <td align="center">
                        @Html.DisplayFor(model => joker.IncidentTime)
                    </td>
                    <td align="center">
                        @Html.ActionLink(joker.Unit.GetDisplayName(), "Details", new { id = joker.ID })
                    </td>
                    <td align="center">
                        @Html.ActionLink(joker.Incident, "Details", new { id = joker.ID })
                    </td>
                    <td>
                        @Html.DisplayFor(model => joker.Summary)
                    </td>
                    <td align="center">
                        <a asp-action="Edit" asp-route-id="@joker.ID">Edit</a> |
                        <a asp-action="Details" asp-route-id="@joker.ID">Details</a> |
                        <a asp-action="Delete" asp-route-id="@joker.ID">Delete</a>
                    </td>
                </tr>
            }
        }
    
    </tbody>
</table>
<p>
    @Html.PagedListPager(Model, page => Url.Action("Index","Jokers", new {page, searchBy =
    ViewBag.searchBy, search = ViewBag.search, sortBy = ViewBag.sortBy}))
   
</p>
        